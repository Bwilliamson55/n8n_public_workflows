{
  "active": false,
  "connections": {
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2022-11-12T13:44:55.275Z",
  "hash": "4ebe7cf6acbf3fe906e3d9570752b42e",
  "id": 1,
  "name": "10 Tips",
  "nodes": [
    {
      "parameters": {
        "content": "# 1. Turn on save manual execution data while developing\n### Ref: [Activating and examining the workflow - n8n Documentation](https://docs.n8n.io/courses/level-one/chapter-5/chapter-5.8/)\n\n- In each workflow you can configure what data is saved\n  - manual executions by default **are not saved**. Toggle this to **ON** for a better dev experience.\n- If something goes wrong in your manual execution, or the browser de-syncs, you can flip over to the execution tab and see everything that happened.",
        "height": 337,
        "width": 563
      },
      "id": "e540c8c3-ae42-4589-9898-edf078970d07",
      "name": "Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        120,
        -60
      ]
    },
    {
      "parameters": {
        "content": "# 2. [Pin ](https://docs.n8n.io/data/data-pinning/)or [Mock ](https://docs.n8n.io/data/data-editing/)Data while developing\n\n1. **These features do not work in production workflows- only while testing**\n2. By pinning and/or mocking data of previous nodes we can save a lot of time. This reduces api calls, and requirements/blockers to dev efforts.",
        "height": 337,
        "width": 563
      },
      "id": "2fd8b449-4202-4539-8b73-7e9a297f5dff",
      "name": "Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        720,
        -60
      ]
    },
    {
      "parameters": {
        "content": "# 3. Use expression fields to get node syntax\n1. When working in [a code node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code/), the intellisense is nice- but doesn't give a good UX for finding output or parameters of previous nodes.\n2. With a partial execution, mocked data, or pinned data- use any node with an expression field (Like [the Set node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set/)) at the end of the flow. With this you can use the standard expression click-adventure to quickly find the [right syntax for specifics in the flow](https://docs.n8n.io/code-examples/methods-variables-reference/#output-of-other-nodes)",
        "height": 337,
        "width": 563
      },
      "id": "66d45103-fada-4ea2-a048-e9fced696320",
      "name": "Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1320,
        -60
      ]
    },
    {
      "parameters": {
        "content": "# 4. If a flow is out of sync\n\n1. Switch to [executions ](https://docs.n8n.io/workflows/executions/)tab of the current flow and back\n  a. Sometimes the UI just needs a bump\n2. Click stop\n  a. Most flows only take a matter of seconds- you can click stop on the running flow to many times force the UI to sync up",
        "height": 337,
        "width": 563
      },
      "id": "1769bbd8-5156-436d-b4a0-74ac8d34dfb0",
      "name": "Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        120,
        320
      ]
    },
    {
      "parameters": {
        "content": "# 5. [JmesPath ](https://docs.n8n.io/code-examples/expressions/jmespath/)and [Luxon](https://docs.n8n.io/code-examples/expressions/luxon/)\n\n1. Use them\n  a. While they are intimidating at first- they do save a lot of time and code effort. **90% of what you'll use can be found on these two pages** for copy+paste\n2. Copy+paste your JSON here: [  JSON Parser - Best JSON Formatter | JSON Editor ](https://jsonparser.org/) then use the interactive filters to create your JmesPath query!\n\n## Go to their docs\n\nIf you have a specific use case that's not covered in the above, the docs for these libraries have more examples. \n\n### [**JmesPath examples**](https://jmespath.org/tutorial.html#filter-projections)\n\n1. ***Remember- in n8n the search syntax is reversed compared to the official docs***\n  a. The examples in the [JMESPath Specification](https://jmespath.org/specification.html#jmespath-specification) follow the pattern  `search(searchString, object)`. [The JMESPath JavaScript library](https://github.com/jmespath/jmespath.js/), which n8n uses, supports `search(object, searchString)` instead.\n  b. The short version: in n8n you'll do: `$jmespath($input.all(), \"[?json.whatever=='foo'].[field1, field2]\")`\n\n[**Luxon Formatting examples**](https://moment.github.io/luxon/#/formatting)\n\n  1. The short version: You'll normally want `$now` or `$today` with  `.toLocaleString()` including a format type found on the above link.\n  2. eg  `$now.toLocaleString(DateTime.DATETIME\\_FULL); //= 'April 20, 2017 at 11:32 AM EDT'`\n  3. Refer to our docs for more examples beyond the official docs",
        "height": 727.6979949874686,
        "width": 887.6447368421049
      },
      "id": "99256aa8-7be2-4d2e-b9c0-b3a5a498416c",
      "name": "Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        740,
        360
      ]
    },
    {
      "parameters": {
        "content": "# 6. [Node settings](https://docs.n8n.io/workflows/nodes/#settings)\n\n  1. Use them!\n    a. Especially `Always Output Data` and `Continue On Fail`",
        "height": 182.40726817042588,
        "width": 499.75751879699214
      },
      "id": "e823da21-f9a2-4d51-abcd-f4f279cd1da2",
      "name": "Note5",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        120,
        -280
      ]
    },
    {
      "parameters": {
        "content": "# 7. Use the browser dev tools\n\n  1. Console.log() can be used in any expression or code node, anywhere!\n  2. N8N frontend is built with Vue - if you are familiar with vue dev, you may be able to leverage vue dev tools in your browser.\n  3. Network tab\n  a. Especially with the [HTTP Request node ](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)- when sending requests manually the payload will be logged in the network tab for review",
        "height": 369.32393483709245,
        "width": 596.7293233082704
      },
      "id": "443e3059-f73f-4efa-9fed-b94f471f1fc2",
      "name": "Note6",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        700,
        -300
      ]
    },
    {
      "parameters": {
        "content": "# 8. Start at the [docs ](https://docs.n8n.io/)- then [community ](https://community.n8n.io/)- then [GitHub](https://github.com/n8n-io/n8n/issues)/Google\n  1. Trouble? Questions? Bugs? (Or so you think?)\n  a. First search the docs: [  Welcome - n8n Documentation ](https://docs.n8n.io/)\n  b. If no luck, search the forum: [ n8n ](https://community.n8n.io/)\n  c. Still no luck? Quickly check [their github issues page ](https://github.com/n8n-io/n8n/issues)with no filters before turning to google.",
        "height": 369.32393483709245,
        "width": 596.7293233082704
      },
      "id": "212a5084-2685-4025-8d5e-9911081239bc",
      "name": "Note7",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1920,
        -280
      ]
    },
    {
      "parameters": {
        "content": "# 9. Incoming data can be modified\n  1. While it may not be intuitive, even as a Developer, the `$input` in each node is **not** read-only (it IS mutable). This is demonstrated in the example code whenever you place a new code node, but that's not where it stops. You can use the `$input` objects for storage of your transformed data, and then return `$input.all()` when you're done, instead of trying to build your own object.",
        "height": 369.32393483709245,
        "width": 596.7293233082704
      },
      "id": "9b871688-f994-4f77-99c7-50defeec8568",
      "name": "Note8",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2220,
        -300
      ]
    },
    {
      "parameters": {
        "content": "# 10. Use backticks and plain text\n  1. Another not-so-intuitive thing- you may get the impression from the docs that all expressions and code need to be wrapped in some special way.   \n\nEg  `{{ \"I want \" + \"to concatenate this\"}}`  \n\nNot so- you CAN do `I want {{ \"\" }} to concatenate this` in an expression field You can also do this in code blocks to make life easier, and it's perfectly valid:  \n\n**let** myBigString = \\`\n  <html>\n    <div> All the things in the html</div>\n    <p>Some ${$input.first().json.fieldName} dynamic stuff too.</p>\n    <em>This also captures newlines!</em>\n  </html> \n`;\n",
        "height": 387.67293233082717,
        "width": 575.8878446115287
      },
      "id": "7f2fa67f-e40e-43a4-aaf0-978a8501906a",
      "name": "Note9",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2020,
        120
      ]
    },
    {
      "parameters": {},
      "id": "30801950-658e-4185-ac62-4f6d9f023f07",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        240,
        420
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field\n// called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();"
      },
      "id": "75af69b7-1449-42bf-87b4-4c16c5ca1929",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        460,
        420
      ]
    }
  ],
  "pinData": {},
  "settings": {},
  "staticData": null,
  "tags": [],
  "updatedAt": "2022-11-12T15:16:52.814Z"
}