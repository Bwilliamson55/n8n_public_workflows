{
  "active": false,
  "connections": {
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "My purpose is to be a clipboard :(",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "My purpose is to be a clipboard :(": {
      "main": [
        [
          {
            "node": "Im just a tool",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook with fake output data": {
      "main": [
        [
          {
            "node": "Im just a tool",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Im just a tool": {
      "main": [
        [
          {
            "node": "build a bunch of things",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "build a bunch of things": {
      "main": [
        [
          {
            "node": "SplitInBatches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SplitInBatches": {
      "main": [
        [
          {
            "node": "IF no more",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 1s": {
      "main": [
        [
          {
            "node": "SplitInBatches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF no more": {
      "main": [
        [
          {
            "node": "Set",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait 1s",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code 7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code 7": {
      "main": [
        [
          {
            "node": "NoOp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NoOp": {
      "main": [
        [
          {
            "node": "Code 9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code 9": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Set 10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2022-11-12T13:44:55.275Z",
  "hash": "2445789ce1d48c47b11bc9d105fe3d96",
  "id": 1,
  "name": "10 Tips",
  "nodes": [
    {
      "parameters": {
        "content": "# 2. [Pin ](https://docs.n8n.io/data/data-pinning/)or [Mock ](https://docs.n8n.io/data/data-editing/)Data while developing\n\n1. **These features do not work in production workflows- only while testing**\n2. By pinning and/or mocking data of previous nodes we can save a lot of time. This reduces api calls, and requirements/blockers to dev efforts.",
        "height": 337,
        "width": 563
      },
      "id": "6e529ecb-8182-4e21-9ba3-f65c09e2f40e",
      "name": "Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1160,
        920
      ]
    },
    {
      "parameters": {
        "content": "# 3. Use expression fields to get node syntax\n1. When working in [a code node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.code/), the intellisense is nice- but doesn't give a good UX for finding output or parameters of previous nodes.\n2. With a partial execution, mocked data, or pinned data- use any node with an expression field (Like [the Set node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set/)) at the end of the flow. With this you can use the standard expression click-adventure to quickly find the [right syntax for specifics in the flow](https://docs.n8n.io/code-examples/methods-variables-reference/#output-of-other-nodes)",
        "height": 337,
        "width": 563
      },
      "id": "5d8e5078-c090-4429-8153-e9fff9131e30",
      "name": "Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -560,
        920
      ]
    },
    {
      "parameters": {
        "content": "# 4. If a flow is out of sync\n\n1. Switch to [executions ](https://docs.n8n.io/workflows/executions/)tab of the current flow and back\n  a. Sometimes the UI just needs a bump\n2. Click stop\n  a. Most flows only take a matter of seconds- you can click stop on the running flow to many times force the UI to sync up",
        "height": 337,
        "width": 563
      },
      "id": "67715505-0fe3-4b9b-855b-fe3ac1257768",
      "name": "Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        40,
        920
      ]
    },
    {
      "parameters": {
        "content": "# 5. [JmesPath ](https://docs.n8n.io/code-examples/expressions/jmespath/)and [Luxon](https://docs.n8n.io/code-examples/expressions/luxon/)\n\n1. Use them\n  a. While they are intimidating at first- they do save a lot of time and code effort. **90% of what you'll use can be found on these two pages** for copy+paste\n2. Copy+paste your JSON here: [  JSON Parser - Best JSON Formatter | JSON Editor ](https://jsonparser.org/) then use the interactive filters to create your JmesPath query!\n\n## Go to their docs\n\nIf you have a specific use case that's not covered in the above, the docs for these libraries have more examples. \n\n### [**JmesPath examples**](https://jmespath.org/tutorial.html#filter-projections)\n\n1. ***Remember- in n8n the search syntax is reversed compared to the official docs***\n  a. The examples in the [JMESPath Specification](https://jmespath.org/specification.html#jmespath-specification) follow the pattern  `search(searchString, object)`. [The JMESPath JavaScript library](https://github.com/jmespath/jmespath.js/), which n8n uses, supports `search(object, searchString)` instead.\n  b. The short version: in n8n you'll do: `$jmespath($input.all(), \"[?json.whatever=='foo'].[field1, field2]\")`\n\n[**Luxon Formatting examples**](https://moment.github.io/luxon/#/formatting)\n\n  1. The short version: You'll normally want `$now` or `$today` with  `.toLocaleString()` including a format type found on the above link.\n  2. eg  `$now.toLocaleString(DateTime.DATETIME\\_FULL); //= 'April 20, 2017 at 11:32 AM EDT'`\n  3. Refer to our docs for more examples beyond the official docs",
        "height": 727.6979949874686,
        "width": 887.6447368421049
      },
      "id": "514c7790-b761-425e-a933-6ca8bfd4f223",
      "name": "Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        640,
        520
      ]
    },
    {
      "parameters": {
        "content": "# 6. [Node settings](https://docs.n8n.io/workflows/nodes/#settings)\n\n  1. Use them!\n    a. Especially `Always Output Data` and `Continue On Fail`",
        "height": 182.40726817042588,
        "width": 499.75751879699214
      },
      "id": "303e34ab-2a84-4906-a00e-90a2fd5668bc",
      "name": "Note5",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1560,
        1060
      ]
    },
    {
      "parameters": {
        "content": "# 7. Use the browser dev tools\n\n  1. Console.log() can be used in any expression or code node, anywhere!\n  2. N8N frontend is built with Vue - if you are familiar with vue dev, you may be able to leverage vue dev tools in your browser.\n  3. Network tab\n  a. Especially with the [HTTP Request node ](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)- when sending requests manually the payload will be logged in the network tab for review",
        "height": 338.79760834851254,
        "width": 595.5082702487273
      },
      "id": "a00e94d1-6efc-4553-a17d-2547ef73bcc4",
      "name": "Note6",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2100,
        900
      ]
    },
    {
      "parameters": {
        "content": "# 8. Start at the [docs ](https://docs.n8n.io/)- then [community ](https://community.n8n.io/)- then [GitHub](https://github.com/n8n-io/n8n/issues)/Google\n  1. Trouble? Questions? Bugs? (Or so you think?)\n  a. First search the docs: [  Welcome - n8n Documentation ](https://docs.n8n.io/)\n  b. If no luck, search the forum: [ n8n ](https://community.n8n.io/)\n  c. Still no luck? Quickly check [their github issues page ](https://github.com/n8n-io/n8n/issues)with no filters before turning to google.",
        "height": 354.06077159280244,
        "width": 596.7293233082704
      },
      "id": "56b8864f-d21e-4b05-9b98-014dbc727ade",
      "name": "Note7",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2740,
        880
      ]
    },
    {
      "parameters": {
        "content": "# 9. Incoming data can be modified\n  1. While it may not be intuitive, even as a Developer, the `$input` in each node is **not** read-only (it IS mutable). This is demonstrated in the example code whenever you place a new code node, but that's not where it stops. You can use the `$input` objects for storage of your transformed data, and then return `$input.all()` when you're done, instead of trying to build your own object.",
        "height": 369.32393483709245,
        "width": 596.7293233082704
      },
      "id": "97fc5d55-78a2-435d-851d-ebb72cd4c8e9",
      "name": "Note8",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3380,
        860
      ]
    },
    {
      "parameters": {
        "content": "# 10. Use backticks and plain text\n  1. Another not-so-intuitive thing- you may get the impression from the docs that all expressions and code need to be wrapped in some special way.   \n\nEg  `{{ \"I want \" + \"to concatenate this\"}}`  \n\nNot so- you CAN do `I want {{ \"\" }} to concatenate this` in an expression field You can also do this in code blocks to make life easier, and it's perfectly valid:  \n\n**let** myBigString = \\`\n  <html>\n    <div> All the things in the html</div>\n    <p>Some ${$input.first().json.fieldName} dynamic stuff too.</p>\n    <em>This also captures newlines!</em>\n  </html> \n`;\n",
        "height": 387.67293233082717,
        "width": 575.8878446115287
      },
      "id": "26dfc1a3-2af0-446d-8dac-4f73bf3e01ee",
      "name": "Note9",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        4020,
        840
      ]
    },
    {
      "parameters": {
        "content": "# 1. Turn on save manual execution data while developing\n### Ref: [Activating and examining the workflow - n8n Documentation](https://docs.n8n.io/courses/level-one/chapter-5/chapter-5.8/)\n\n- In each workflow you can configure what data is saved\n  - manual executions by default **are not saved**. Toggle this to **ON** for a better dev experience.\n- If something goes wrong in your manual execution, or the browser de-syncs, you can flip over to the execution tab and see everything that happened.",
        "height": 362.64211425040713,
        "width": 563
      },
      "id": "fd132b17-2acc-452e-b546-0f2dccff446a",
      "name": "Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1760,
        894.3578857495927
      ]
    },
    {
      "parameters": {},
      "id": "1eb43a2a-c0f2-4c3a-8382-533be705aaab",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1540,
        1300
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "33ae3204-51fa-4fb1-9b11-a6969628185e",
      "name": "My purpose is to be a clipboard :(",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        -940,
        1300
      ]
    },
    {
      "parameters": {
        "path": "df6a70aa-5dbd-4881-8f8b-0a1985fb6443",
        "options": {}
      },
      "id": "c9d4aa42-78e1-4d88-85e1-6c6de552b95f",
      "name": "Webhook with fake output data",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -940,
        1480
      ],
      "webhookId": "df6a70aa-5dbd-4881-8f8b-0a1985fb6443"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "formSource",
              "value": "={{ $json[\"headers\"][\"source\"] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "23c86898-1363-431f-a146-5f4d1beb31e9",
      "name": "Im just a tool",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        -340,
        1300
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "f6c7b7ac-035f-4096-9482-9cee42c9d8a4",
      "name": "SplitInBatches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [
        240,
        1300
      ]
    },
    {
      "parameters": {
        "jsCode": "let junk = Array(30).fill(0).map((e,i)=>{return {'index': i+1}})\n\nreturn {junk}"
      },
      "id": "698b2e29-3fd3-4f31-9510-008ee7c4b285",
      "name": "build a bunch of things",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        40,
        1300
      ]
    },
    {
      "parameters": {
        "unit": "seconds"
      },
      "id": "b2991fcc-0433-4342-8ba9-fd671b455170",
      "name": "Wait 1s",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        260,
        1520
      ],
      "webhookId": "bcb25797-925d-4f16-85ec-40e6476df0b2"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": true,
              "value2": "={{$node[\"SplitInBatches\"].context[\"noItemsLeft\"]}}"
            }
          ]
        }
      },
      "id": "98f292b2-958a-438d-bea5-622a61c100e2",
      "name": "IF no more",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        420,
        1300
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "jmespathExample",
              "value": "={{$jmespath($input.all(), \"[].json.junk[?index==`1`][] | [0]\" ) }}"
            },
            {
              "name": "luxonExample",
              "value": "={{$today.minus({days: 7}).toLocaleString()}}\n or\n{{$today.minus({days: 7}).toLocaleString(DateTime.DATETIME_FULL)}}"
            }
          ]
        },
        "options": {}
      },
      "id": "a42107a8-0782-4f96-9760-e4172754e632",
      "name": "Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        1000,
        1280
      ]
    },
    {
      "parameters": {
        "url": "http:///badaddress.test",
        "options": {}
      },
      "id": "a160293c-0111-471b-b29e-80f13f4752d9",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1740,
        1280
      ],
      "alwaysOutputData": true,
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field\n// called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n  console.log(`I'm the new value! ${item.json.myNewField.toString()}`)\n  console.log(`I'm also the new value!`+item.json.myNewField.toString())\n}\n\nreturn $input.all();"
      },
      "id": "a7610d83-c6a6-4a99-8f23-0129246e9ebe",
      "name": "Code 7",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2340,
        1280
      ]
    },
    {
      "parameters": {},
      "id": "2ad5dee2-35e4-4e9c-8d6f-1d56b8416001",
      "name": "NoOp",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2980,
        1280
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field\n// called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();"
      },
      "id": "3a834da0-eec0-4e65-b742-6a79bfbbef7a",
      "name": "Code 9",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        3620,
        1280
      ]
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field\n// called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  let myBigString = `\n  <html>\n    <div> All the things in the html</div>\n    <p>Some ${$input.first().json.myNewField ? '<br>I exist!<br>' : ''} dynamic stuff too.</p>\n    <em>This also captures newlines!</em>\n  </html> \n`;\n  item.json.myBigString = 1;\n}\n\nreturn $input.all();"
      },
      "id": "b11966e0-6998-49bd-ac4f-bb5fffd654a7",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        4120,
        1280
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "githubRepo",
              "value": "https://github.com/Bwilliamson55/n8n_public_workflows"
            }
          ]
        },
        "options": {}
      },
      "id": "9e66ef53-4a71-4130-8ac5-54ee0964f147",
      "name": "Set 10",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        4300,
        1280
      ]
    },
    {
      "parameters": {
        "content": "# 10 Tips for N8N\n\n[Get this workflow on Github](https://github.com/Bwilliamson55/n8n_public_workflows/tree/main/goldfish)",
        "height": 133.6,
        "width": 309.59999999999997
      },
      "id": "46729451-3155-46c5-867d-a9c2dc8336ea",
      "name": "Note10",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2100,
        1120
      ]
    }
  ],
  "pinData": {
    "My purpose is to be a clipboard :(": [
      {
        "json": {
          "headers": {
            "host": "the.example.com",
            "x-forwarded-scheme": "https",
            "x-forwarded-proto": "https",
            "x-forwarded-for": "12.12.12.12",
            "x-real-ip": "12.12.22.12",
            "connection": "close",
            "content-length": "4572",
            "authorization": "Bearer supersecretkey",
            "source": "my-custom-form-header",
            "content-type": "application/json",
            "user-agent": "Mozilla/5.0 (compatible; Google-Apps-Script; beanserver; +https://script.google.com; id: blabla)",
            "accept-encoding": "gzip, deflate, br"
          },
          "params": {},
          "query": {},
          "body": {
            "some": "params",
            "and": "stuff"
          }
        }
      }
    ],
    "Webhook with fake output data": [
      {
        "json": {
          "headers": {
            "host": "the.example.com",
            "x-forwarded-scheme": "https",
            "x-forwarded-proto": "https",
            "x-forwarded-for": "12.12.12.12",
            "x-real-ip": "12.12.22.12",
            "connection": "close",
            "content-length": "4572",
            "authorization": "Bearer supersecretkey",
            "source": "my-custom-form-header",
            "content-type": "application/json",
            "user-agent": "Mozilla/5.0 (compatible; Google-Apps-Script; beanserver; +https://script.google.com; id: blabla)",
            "accept-encoding": "gzip, deflate, br"
          },
          "params": {},
          "query": {},
          "body": {
            "some": "params",
            "and": "stuff"
          }
        }
      }
    ]
  },
  "settings": {
    "saveExecutionProgress": "DEFAULT",
    "saveManualExecutions": true,
    "callerPolicy": "any"
  },
  "staticData": null,
  "tags": [],
  "updatedAt": "2022-11-13T23:22:17.374Z"
}